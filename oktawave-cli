#!/usr/bin/env python

import sys
from oktawave.cli import OktawaveCli
import logging
import argparse
import subprocess
import httplib
from setproctitle import setproctitle
import ConfigParser
import os
import readline


VERSION = "0.8"

# Helpers to add subparsers based on simple descriptions
# Use subparser.add_argument() if you need to make use of all argparse options
def add_subparsers(subparsers, data):
    for sp in sorted(data, key = lambda x : x[0]):
        if sp[0] in subparsers.choices:
            continue
        subparser = subparsers.add_parser(sp[0], help=sp[1])
        for arg in sp[2]:
            if len(arg) < 3:
                arg.append({})
            subparser.add_argument(arg[0], help=arg[1], **arg[2])

def simple_subparsers(data, id_desc):
    return [
        [item[0], item[1], [['id', id_desc, {'type' : int}]]]
        for item in data
    ]

def simple_ldb_subparsers(data):
    return [
        [item[0], item[1], [
            ['id', 'Database VM ID, as returned by "ORDB List"', {'type' : int}],
            ['name', 'Logical database name']
        ]]
        for item in data
    ]

def simple_vm_subparsers(data):
    return simple_subparsers(data, 'Virtual machine ID, as returned by "OCI List"')

def simple_db_subparsers(data):
    return simple_subparsers(data, 'Database virtual machine ID, as returned by "ORDB List"')

def simple_container_subparsers(data):
    return simple_subparsers(data, 'Container ID, as returned by "Container List"')


if(__name__ == '__main__'):
    # Change proctitle to prevent password leak
    setproctitle('Oktawave CLI')
    # Create options parser
    parser = argparse.ArgumentParser(prog='oktawave-cli', formatter_class=argparse.RawDescriptionHelpFormatter, epilog=
                                     "To see commands available in a particular namespace, use:\noktawave-cli <NAMESPACE> --help\nTo see information about a command, use:\noktawave-cli <NAMESPACE> <COMMAND> --help\n "
                                     )
    parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + VERSION)
    parser.add_argument('-c', '--config-file', help='Specify configuration file, defaults to ~/.oktawave-cli/config')
    parser.add_argument('-i', '--interactive', help="Enable interactive mode", action='store_true')
    parser.add_argument('-u', '--username', help="Oktawave username")
    parser.add_argument('-p', '--password', help="Oktawave password")
    parser.add_argument('-ocsu', '--ocs-username', help="OCS username")
    parser.add_argument('-ocsp', '--ocs-password', help="OCS password")
    parser.add_argument('-d', '--debug', action='store_true', help='Enable debugging output')
    sysparser = parser
    if '-i' in sys.argv or '--interactive' in sys.argv:
        parser = argparse.ArgumentParser(prog='oktawave> ', formatter_class=argparse.RawDescriptionHelpFormatter, epilog=
                                         "To see commands available in a particular namespace, use:\n<NAMESPACE> help\nTo see information about a command, use:\n<NAMESPACE> <COMMAND> --help\nTo exit, type \"exit\"."
                                         )
    namespace_parser = parser.add_subparsers(title='Command namespace', dest='namespace')
    oci_parser = namespace_parser.add_parser('OCI', help='Commands related to virtual machine instances')
    parsers = {}
    oci_parsers = oci_parser.add_subparsers(title='OCI commands', dest='command')
    parsers['OCI'] = oci_parsers
    add_subparsers(oci_parsers, simple_vm_subparsers([
        ['Restart', 'Restart virtual machine'],
        ['TurnOff', 'Turn virtual machine off'],
        ['TurnOn', 'Turn virtual machine on'],
        ['Delete', 'Delete virtual machine'],
        ['Logs', 'Show virtual machine logs'],
        ['Settings', 'Show basic virtual machine settings'],
        ]) + [
            ['TemplateCategories', 'Get available template categories', []],
            ['Templates', 'List available VM templates from a category', [
                ['id', 'Template category ID, as returned by "OCI TemplateCategories"', {'type' : int}]
                ]],
            ['TemplateInfo', 'Get detailed information about a particular template', [
                ['id', 'Template ID, as returned by "OCI Templates"', {'type' : int}]
                ]],
            ['Create', 'Create a new VM instance from template', [
                ['template', 'Template ID, as returned by "OCI Templates"', {'type' : int}],
                ['name', 'VM name'],
                ['oci_class', 'OCI class name, for example "Small" or "Extreme". If not specified, the minimal class for the template is used.', {'nargs' : '?'}]
                ]],
            ['ChangeClass', 'Change running VM class', [
                ['id', 'Existing virtual machine ID, as returned by "OCI List"', {'type' : int}],
                ['oci_class', 'OCI class name, for example "Small" or "Extreme".']
                ]],
            ['Clone', 'Clone a virtual machine', [
                ['id', 'Existing virtual machine ID, as returned by "OCI List"', {'type' : int}],
                ['name', 'Clone name'],
                ['clonetype', 'Runtime: new root/administator password will be generated, new host name set etc. (Unmodified tech-support account required on OCI). AbsoluteCopy: initialization process will be skipped\n\tonly new IP address and domain name will be assigned.', {'choices': ['Runtime', 'AbsoluteCopy']}]
                ]],
            ['List', 'List virtual machines', []],
            ['ListDetails', 'List virtual machines with details', []]
        ])
    ocs_parser = namespace_parser.add_parser('OCS', help='Commands related to OCS')
    ocs_parsers = ocs_parser.add_subparsers(title='OCS commands', dest='command')
    parsers['OCS'] = ocs_parsers
    add_subparsers(ocs_parsers, [
        ['ListContainers', 'Show the list of containers', []],
        ['Get', 'Get an object or file', [
            ['container', 'Container containing the object'],
            ['path', 'Optional: path to the object within the container', {'nargs' : '?'}]
            ]],
        ['List', 'List container or directory content', [
            ['container', 'Container to list content or containing the directory'],
            ['path', 'Optional: path to the directory within the container', {'nargs' : '?'}]
            ]],
        ['CreateContainer', 'Create a new container', [
            ['name', 'Name of the container']
            ]],
        ['CreateDirectory', 'Create a new directory', [
            ['container', 'Container name'],
            ['path', 'Path to the new directory within the container', {'nargs' : '?'}]
            ]],
        ['Put', 'Upload a file', [
            ['local_path', 'Local path to the file'],
            ['container', 'Container name'],
            ['path', 'Path to the destination file within the container', {'nargs' : '?'}]
            ]],
        ['Delete', 'Delete a file, object or directory', [
            ['container', 'Container name'],
            ['path', 'Path to the deleted object', {'nargs' : '?'}]
            ]],
        ['DeleteContainer', 'Delete a container', [
            ['container', 'Container name']
        ]]
    ])
    ovs_parser = namespace_parser.add_parser('OVS', help='Commands related to OVS')
    ovs_parsers = ovs_parser.add_subparsers(title='OVS commands', dest='command')
    parsers['OVS'] = ovs_parsers
    add_subparsers(ovs_parsers, [
        ['List', 'List disks', []],
        ['Delete', 'Delete a disk', [
            ['id', 'Disk ID, as returned by "OVS List"', {'type' : int}]
            ]],
        ['Create', 'Add a new disk', [
            ['name', 'Disk name'],
            ['capacity', 'Disk capacity (GB)', {'type' : int}],
            ['tier', 'Disk tier (1, 2, 3 or 5)', {'type' : int, 'choices' : [1, 2, 3, 4, 5]}],
            ['disktype', 'If disk is shared or unshared?', {'choices': ['shared', 'unshared']}]
            ]],
        ['Map', 'Map a disk to an instance', [
            ['disk_id', 'Disk ID, as returned by "OVS List"', {'type' : int}],
            ['oci_id', 'VM instance ID, as returned by "OCI List"', {'type' : int}]
            ]],
        ['Unmap', 'Unmap a disk from an instance', [
            ['disk_id', 'Disk ID, as returned by "OVS List"', {'type' : int}],
            ['oci_id', 'VM instance ID, as returned by "OCI List"', {'type' : int}]
        ]],
        ['ChangeTier', 'Change disk\'s tier', [
            ['disk_id', 'Disk ID, as returned by "OVS List"', {'type' : int}],
            ['tier', 'Disk tier (1, 2, 3, 4 or 5)', {'type' : int, 'choices' : [1, 2, 3, 4, 5]}],
        ]],
        ['Extend', 'Change disk\'s size', [
            ['disk_id', 'Disk ID, as returned by "OVS List"', {'type' : int}],
            ['size', 'New disk size (GB). It cannot be smaller than the current disk size.', {'type' : int}],
        ]]
    ])
    ordb_parser = namespace_parser.add_parser('ORDB', help='Commands related to ORDB')
    ordb_parsers = ordb_parser.add_subparsers(title='ORDB commands', dest='command')
    parsers['ORDB'] = ordb_parsers
    add_subparsers(ordb_parsers, [
        ['List', 'List database instances', []],
        ['Delete', 'Delete a database instance or logical database', [
            ['id', 'VM instance ID, as returned by "ORDB List"', {'type' : int}],
            ['db_name', 'Database name (optional; if not specified deletes the virtual machine)', {'nargs' : '?'}]
            ]],
        ['LogicalDatabases', 'Show a list of logical databases', [
            ['id', 'VM instance ID, as returned by "ORDB List"; optional - if not specified, prints a list of all logical databases', {'nargs' : '?', 'type' : int}]
            ]],
        ['Templates', 'List available database templates', []],
        ['TemplateInfo', 'Show information about a template', [
            ['id', 'Template ID, as returned by "ORDB Templates"']
            ]],
        ['Create', 'Create a new database VM instance from template', [
            ['template', 'Template ID, as returned by "ORDB Templates"', {'type' : int}],
            ['name', 'Database VM name']
            ]],
        ['Clone', 'Clone a DB virtual machine', [
            ['id', 'Existing DB virtual machine ID, as returned by "ORDB List"', {'type' : int}],
            ['name', 'Clone name']
            ]],
        ['CreateLogicalDatabase', 'Create a logical database within an instance', [
            ['id', 'Database VM ID, as returned by "ORDB List"', {'type' : int}],
            ['name', 'Logical database name'],
            ['encoding', 'Database character encoding', {'choices' : ['utf8', 'latin2']}]
            ]],
        ['MoveLogicalDatabase', 'Move a logical database to a different instance', [
            ['id_from', 'Source database VM ID, as returned by "ORDB List"', {'type' : int}],
            ['id_to', 'Destination database VM ID, as returned by "ORDB List"', {'type' : int}],
            ['name', 'Logical database name']
            ]],
        ['Backups', 'Lists logical database backup files', []],
        ['RestoreLogicalDatabase', 'Restore a logical database from backup', [
            ['id', 'Database virtual machine ID, as returned by "ORDB List"'],
            ['backup_file', 'Backup file name, as returned by "ORDB Backups"'],
            ['name', 'Name of the target logical database']
        ]]
        ] + simple_db_subparsers([
            ['TurnOff', 'Turn database virtual machine off'],
            ['TurnOn', 'Turn database virtual machine on'],
            ['Restart', 'Restart database virtual machine'],
            ['Logs', 'Show database virtual machine logs'],
            ['LogicalDatabases', 'Show a list of logical databases'],
            ['GlobalSettings', 'Show global server settings'],
            ['Settings', 'Show basic database VM settings']
            ]) + simple_ldb_subparsers([
#		['LogicalDatabaseStats', 'Shows logical database statistics'],
['BackupLogicalDatabase', 'Create a backup of a logical database']
            ]))
    account_parser = namespace_parser.add_parser('Account', help='Account-related commands')
    account_parsers = account_parser.add_subparsers(title='Account commands', dest='command')
    parsers['Account'] = account_parsers
    add_subparsers(account_parsers, [
        ['Settings', 'Show basic account settings', []],
        ['RunningJobs', 'Show active operations', []],
        ['Users', 'Show users', []]
    ])
    container_parser = namespace_parser.add_parser('Container', help='Commands related to containers')
    container_parsers = container_parser.add_subparsers(title='Container commands', dest='command')
    parsers['Containers'] = container_parsers
    container_params = [
            ['name', 'Container name'],
            ['--load-balancer', 'Enable load balancer', {'action' : 'store_true'}],
            ['--service', 'Service (default: "Port")', {
                'choices' : ['HTTP', 'HTTPS', 'SMTP', 'MySQL', 'Port'],
                'default' : 'Port'}],
            ['--port', 'Port (only if --service=Port)', {'type' : int}],
            ['--proxy-cache', 'Enable proxy cache', {'action' : 'store_true'}],
            ['--use-ssl', 'Enable SSL', {'action' : 'store_true'}],
            ['--healthcheck', 'Enable healthcheck', {'action' : 'store_true'}],
            ['--mysql-master-id', 'ID of the MySQL master OCI (it will be added to the container)', {'type' : int}],
            ['--session-persistence', 'Session persistence type (default: "none")', {
                'choices' : ['none', 'by_source_ip', 'by_cookie'],
                'default' : 'none'}],
            ['--load-balancer-algorithm', 'Load balancer algorithm (default: "least_response_time")', {
                'choices' : ['least_response_time', 'least_connections', 'source_ip_hash', 'round_robin'],
                'default' : 'least_response_time'}],
            ['--ip-version', 'IP version (default: "4")', {
                'choices' : ['4', '6', 'both'],
                'default' : '4'}],
            ['--autoscaling', 'Autoscaling (default: "off"', {
                'choices' : ['on', 'off'],
                'default' : 'off'}]]
    add_subparsers(container_parsers, [
        ['List', 'List containers', []],
        ['RemoveOCI', 'Remove an OCI from container', [
            ['id', 'Container ID', {'type' : int}],
            ['oci_id', 'OCI ID', {'type' : int}]
        ]],
        ['AddOCI', 'Add an OCI to container', [
            ['id', 'Container ID', {'type' : int}],
            ['oci_id', 'OCI ID', {'type' : int}]
        ]],
        ['Create', 'Create a new container', container_params],
        ['Edit', 'Modify an existing container. Takes the same options a "Container Create" and the container\'s ID.', [
            ['id', 'Container ID', {'type' : int}],
        ] + container_params],
        ] + simple_container_subparsers([
            ['Get', 'Display a container\'s information'],
            ['Delete', 'Delete a container']
        ]))
    # adding dummy "---" help string to found methods that are not
    # documented yet (this gotta go when finished, or probably should be done in
    # debug mode only)
    for m in dir(OktawaveCli):
        if m[0] == '_':
            continue
        (ns, x, cmd) = m.partition('_')
        if not ns in parsers:
            continue
        add_subparsers(parsers[ns], [[cmd, '---', []]])

    args = sysparser.parse_args()

    # Read auth credentials from config file
    config = ConfigParser.RawConfigParser()
    if args.config_file == None:
        args.config_file = '~/.oktawave-cli/config'
    try:
        config.read(os.path.expanduser(args.config_file))
        if args.username == None:
            args.username = config.get('Auth', 'username')
        if args.password == None:
            args.password = config.get('Auth', 'password')
    except Exception as e:
        print "Error reading the configuration file " + args.config_file + ": " + str(e)
    if (not hasattr(args, 'namespace') or args.namespace == 'OCS'):
        try:
            if args.ocs_username == None:
                args.ocs_username = config.get('OCS', 'username')
            if args.ocs_password == None:
                args.ocs_password = config.get('OCS', 'password')
        except Exception as e:
            if hasattr(args, 'namespace'):
                print "Error reading OCS credentials from the configuration file, OCS methods will probably fail. Details: " + str(e)
    if None in [args.username, args.password]:
        print "ERROR: login credentials missing/incomplete"
        sys.exit(1)

    if args.debug:
        logger = logging.getLogger()
        # uncomment if you want even more debug
        #logger.root.setLevel(logging.DEBUG)
        logger.root.addHandler(logging.StreamHandler(sys.stdout))
    if args.interactive:
        print "This is Oktawave CLI, version " + VERSION + '.'
        print "Logging in to Oktawave..."
        api = OktawaveCli(args, debug=args.debug)
        print "Successfully logged in as " + args.username + '.'
        print 'Type a command, or "help" to get help.'
        readline.parse_and_bind('tab: complete')
        readline.parse_and_bind('set editing-mode vi')
        while True:
            try:
                line = raw_input(args.username + '@oktawave> ')
            except EOFError:
                line = 'exit'
            except KeyboardInterrupt:
                line = 'exit'
            words = line.split()
            if len(words) >= 1:
                if words[0] == 'exit':
                    print "Bye."
                    sys.exit(0)
                if words[len(words) - 1] == 'help' and len(words) <= 2:
                    words[len(words) - 1] = '--help'
            try:
                cmdargs = parser.parse_args(words)
            except Exception:
                continue
            except SystemExit:
                continue
            for k in dir(args):
                if not hasattr(cmdargs, k):
                    setattr(cmdargs, k, getattr(args, k))
            method = getattr(api, cmdargs.namespace + '_' + cmdargs.command)
            try:
                method(cmdargs)
            except Exception as e:
                print "ERROR: " + str(e)
            except SystemExit:
                continue
        sys.exit(1)
    # non-interactive mode - just execute the command
    api = OktawaveCli(args, debug=args.debug)
    method = getattr(api, args.namespace + '_' + args.command)
    res = method(args)
    if res != None:
        sys.exit(1)
    sys.exit(0)
